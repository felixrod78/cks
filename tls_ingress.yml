openssl req -nodes -new  -x509 -keyout  accounts.key -out accounts.crt  -subj "/CN=accounts.svc" -days 10000

Generamos secreto



apiVersion: v1
kind: Secret
metadata:
  name: secret-tls
  namespace: accounts
type: kubernetes.io/tls
data:
  # the data is abbreviated in this example
  tls.crt: |
        LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lVYmtmekt5eDY4
        VmdUVVA4L3FSN0Rya1A2MUE4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0Z6RVZNQk1HQTFVRUF3d01Z
        V05qYjNWdWRITXVjM1pqTUI0WERUSXlNREl4TURBNE1UVXlObG9YRFRRNQpNRFl5T0RBNE1UVXlO
        bG93RnpFVk1CTUdBMVVFQXd3TVlXTmpiM1Z1ZEhNdWMzWmpNSUlCSWpBTkJna3Foa2lHCjl3MEJB
        UUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF5R1R2b2lJSytSQnR2aUZNTHRkTCt1TUZJYmVydkJrMCtQ
        UHUKckNCZjFqVmNJRjRGSkk1UllRVG9vVmtOQW1aOUg4ZG1mcy9Uck1XcDFHdG9JYmkxemk0Q0dL
        cUN4a0tVd09DWApKMkI4b2RSdUVJNEVZRFFjR3MycFl6em02Vk10aVJxdUZYNEYrdFQ1Q2NZUGtv
        R3RLRnhxRHplaFQ2TlUwMXRWClhtdWFHS0llQXFzU0YwZ0M2M1F0UkFzWkpTbFdpcnYvbGVWL1E1
        RlExUDVseE9XZUdaMW55Y2lDNVRwVGxiM1AKNFA3dVFkUVVGeGoyaUh6cTE1aldKMklRYzF6NWQz
        dzVkQk9NUVREUDJpRUJJRTRXRHkvZENDeU53Vmx6TzdwdQpKbVdzcjZ3dUNKdDc3MlJ3Q01JTEdQ
        Uk10LzdYRG0wS0thbzN2ZUIwdForU2owMjVtd0lEQVFBQm8xTXdVVEFkCkJnTlZIUTRFRmdRVXhz
        LzdJMVR5Ri9UZnQ2Wm9idEVHN1hMN3ZEc3dId1lEVlIwakJCZ3dGb0FVeHMvN0kxVHkKRi9UZnQ2
        Wm9idEVHN1hMN3ZEc3dEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFP
        QwpBUUVBZlNiMHBzdkVhbE1FYURIMmVVV0g3cUhGVGwrSTBIaU15VnUra2RSOSsyUkhrY0ZWUFhV
        WHBzK0lneFAxCm9nRVo4TWhQQTZYRUUwUFZTWTNGcmRVbXlmMytCYUJXNks3bE5lbTBvR09ma1hj
        NlMvUUdWdExQQVdMVDluV0sKMXZDdk0rNGJpbDBmV21YMEFLa0FBemVqdHhoT00wcnI1QkFFN21t
        dkd0em9EYzhEcXJxTmNSL2RKV3ZKZlJCZApySU84Q0VzQkt0S0xEc1grTWhraUVHRmRXTE1FTWRM
        STJtVVQ5dGJYOFNrcXBveGMvMHlyQWdGcDlKd242UVNHCmc2c0l6NENCMlZTSDVydXV1L1dIVzRp
        Zm9RT1FzQlVnekh0OVNBOGJjSUdVZmE5anBSVm9lckxhS25nOHhVYXEKbFd6cTIzVHd3Z1dxYTNR
        MWJHNlc1ZnE3V1E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: |
        LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZB
        QVNDQktjd2dnU2pBZ0VBQW9JQkFRRElaTytpSWdyNUVHMisKSVV3dTEwdjY0d1VodDZ1OEdUVDQ4
        KzZzSUYvV05Wd2dYZ1VramxGaEJPaWhXUTBDWm4wZngyWit6OU9zeGFuVQphMmdodUxYT0xnSVlx
        b0xHUXBUQTRKY25ZSHloMUc0UWpnUmdOQndhemFsalBPYnBVeTJKR3E0VmZnWDYxUGtKCnhnK1Nn
        YTBvWEdvUE42RlBvMVRUVzFWZWE1b1lvaDRDcXhJWFNBTHJkQzFFQ3hrbEtWYUt1LytWNVg5RGtW
        RFUKL21YRTVaNFpuV2ZKeUlMbE9sT1Z2Yy9nL3U1QjFCUVhHUGFJZk9yWG1OWW5ZaEJ6WFBsM2ZE
        bDBFNHhCTU0vYQpJUUVnVGhZUEw5MElMSTNCV1hNN3VtNG1aYXl2ckM0SW0zdnZaSEFJd2dzWTlF
        eTMvdGNPYlFvcHFqZTk0SFMxCm41S1BUYm1iQWdNQkFBRUNnZ0VBUTZNTjNzTnV3TEh5MklHVW5S
        cTk0bWhOaXh2Yk14bXU3M2dsenFMK3RlWTgKdWhBQjNGek15dHBGU25Bc0crdEx3RFlsT2hnYmNl
        MGxiVFR6YUs1WGJzZkluVnF2MlFzUCtpblQyczZPUW5EWQoxVzJadkg3YUhaSGM0a25rQmt5MHlk
        bmZlQkdaSXhoUEZpVnJqQitJdWw2MnpYd1JUamZxb1l2cVBIeEUvcHJmCnd2R2RueU1jT3R6cHlK
        R2ZjVTV5YndwcmF1eUF0YUJkbG9jUmRJRkZnTDV6TWluMnpZaEpEN1hKVDBhR2V3ZGkKcWZVUmtE
        SEIyZzVSeVQ1WUZxclhrWjZ3a3BjS29rOUhBeTBVWGk2bXlTeXpsQWJTbHdseG4wdlFKODRPL2N1
        SgpGLytRc3ZGb2FnYzlTME02ZVRuK2ZYNHV6UjcyWDRFK1RYOTBsZ1g1UVFLQmdRRDQzZW5UdjQ2
        UjFxeElSQ0pEClR2UXF6Y1Z2dFNFdE85WjcwMzdVUkp1Q1ZSdWdGRENGeXAvTHZHaVE3dkd3SzZm
        R2djZmF0Qm5VVXdDK2QrN3EKK3QrRDNrcFBsYmlWTjR4VXdPbnR4cHhGQ0VFVTRkRjQwTzVmY3dp
        T0dHdXdPUG1uSWdJV25nT1hzMHVBN1M3bwpTN29USlg3ZndZbXJjK1FkNysxb2src2tUUUtCZ1FE
        T0kxbWlKRHozb2Nhakc0MmpWL0hwQTBXeHk1RE05YW5DClVQbklMWlFuYVB5QTM4RE8wUm5hUUIz
        ZUlubmZLd2VTdXJtQlBpeWZyNlVDbExEaXdEWFJmQXp5UjNIZHAwdE8KS25zNVhZeGF0RTVHaFdu
        cFd4K0ZBZ2tCUUVWMUpxeUZrRTB3ZzlBdjRWMUZpUzhtelQ4Mm9UYjdKbE1QT1NPMgpuUHZ1U3hK
        cGh3S0JnUUN0NTBSU04zV0U2NklRRGF4enBHUnkxTCsydzdlZlNFVWsyakd5V3c3Z0VHRHhoNm93
        Cms5citIM1ppY05acTZOYWduR2Z2cUJLMGtCdmcvU1h6QmNQUy9pNm5WbFJaMFNzNnZtTzVTQ1JE
        Q1BXUmhncysKaGFGTkNiRmN1aXZtUktvUDVHL1pKaW9VZzdHck1oS3BPT0dhSjRWMURtVUpiajVs
        dlJjRkVQZ3JzUUtCZ0c4SQo0WTRSNFBrdUhkWGIwSlpNbDlTQVc3a2lRblAwVzZWOGdwOE4xZ0RJ
        YjBKbncrNWkrWDd6REdPTHhJT3VKTjBuClVTYkp1N1drSWNqYkdOQjY0a0pkaEllNGJpQUxyZWVE
        d0c0czhwNGxBd2kvY2tZdFBEUWozWC9jQTgzUHNCd2QKbDBacnFlY3dpRklkUzlXbHRzZ1JYSkU1
        bW9IWHNHSDcrMFBuRWhyZkFvR0FISmd4aVlueUFKUmIrV3o4MklXcgo5aWppanlSNkxDb2xkSFU0
        UndTdkhrcXVlWkFnNkwxVS9oS0hEUTFuWFFwVkJPWHRwbys5U3hMcS9NbnU1RHNPCnhpNUdhVE9V
        c0lFSEwrNEhsdEJOT3BuUEhwMTZJQTlzVTVwc0V0ZXFYU0RUSTRwcjZQcU5yVE9rejdhVFJhM00K
        V0grc3pYVDRiK1JwSms1YXczL2lzdWc9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  

Creamos el ingress tls

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tls-example-ingress
  namespace: accounts
spec:
  tls:
  - hosts:
      - accounts-svc
    secretName: secret-tls
  rules:
  - host: accounts-svc
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: accounts-svc
            port:
              number: 80